<!--
  Example launch file for octomap_server mapping:
  Listens to incoming PointCloud2 data and incrementally builds an octomap.
  The data is sent out in different representations.

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details
-->
<launch>
	<arg name="name" default="takeshiBagPack1"/>
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.05"/>

		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="base_link"/>

		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="5.0"/>
		<param name="filter_ground " value="false" type="bool"/>
		<param name="base_frame_id " value="base_link" type="str"/>

		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/hsrb/cloud"/>

	</node>

	<node pkg="tf" type="static_transform_publisher" name="link_broadcaster_backpack" args="0.016 -0.073 0.979 -0.009, 0.887, -0.462, -0.004 base_link head_rgbd_sensor_rgb_frame 100"/>

	<node name="cloudPublisher" pkg="pcl_ros" type="pcd_to_pointcloud" args="$(find space_quantization)/cloud/$(arg name).pcd 1" output="screen">
		<remap from="cloud_pcd" to="/hsrb/cloud"/>
		<param name="frame_id" value="head_rgbd_sensor_rgb_frame" type="str"/>
	</node>
</launch>
