<!-- Example launch file for octomap_server mapping: Listens to incoming PointCloud2 data and incrementally builds an octomap. The data is sent out in different representations. Copy this file into your workspace and adjust as needed, see
www.ros.org/wiki/octomap_server for details -->
<launch>
	<arg name="name" default="wrs2018-2"/>
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.05"/>

		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="map"/>
		<param name="occupancy_max_z" value="2.0" type="double"/>
		<param name="occupancy_min_z" value="0.2" type="double"/>
		<param name="pointcloud_min_z" value="0.2" type="double"/>
		<param name="pointcloud_max_z" value="2.0" type="double"/>

		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="25.0"/>
		<param name="filter_ground " value="true" type="bool"/>
		<param name="base_frame_id " value="map" type="str"/>

		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/hsrb/processed_cloud"/>

	</node>

	<node pkg="tf" type="static_transform_publisher" name="map_broadcaster" args="0 0 26.0 0 0.0 0  map head_rgbd_sensor_rgb_frame 100"/>

	<node name="preprocessor" pkg="space_quantization" type="cloud_preprocessor" output="screen">
		<remap from="/cloud" to="/hsrb/cloud"/>
		<remap from="/processed_cloud" to="/hsrb/processed_cloud"/>
		<param name="cropDistance" value="-2.0" type="double"/>
		<param name="voxelSize" value="0.02" type="double"/>
		<param name="baseFrame" value="map" type="string"/>
	</node>

	<node name="cloudPublisher" pkg="pcl_ros" type="pcd_to_pointcloud" args="$(find space_quantization)/cloud/$(arg name).pcd " output="screen">
		<remap from="cloud_pcd" to="/hsrb/cloud"/>
		<param name="frame_id" value="head_rgbd_sensor_rgb_frame" type="str"/>
	</node>
</launch>
